[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-dev-agent"
version = "0.1.0"
description = "Python CLI agent for software development automation"
authors = [{name = "Codex"}]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
  "click>=8.1",
  "requests>=2.31",
  "pydantic>=2.8",
  "tomli; python_version < '3.11'",
  "tree-sitter==0.20.1",
  "tree-sitter-languages>=1.10",
  "pyyaml>=6.0",
  "jsonschema>=4.21",
  "networkx>=3.0",
  "diskcache>=5.6",
  "python-lsp-jsonrpc>=1.0",
  "numpy>=1.24",
  "scikit-learn>=1.3"
]

[project.scripts]
devagent = "ai_dev_agent.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["ai_dev_agent*"]

[tool.setuptools.package-data]
"ai_dev_agent" = [
  "prompts/**/*.md"
]

[project.optional-dependencies]
dev = [
  "pytest>=7.4",
  "pytest-cov>=4.1",
  "pytest-xdist>=3.5",
  "pytest-timeout>=2.2",
  "pytest-mock>=3.12",
  "coverage[toml]>=7.4"
]
test = [
  "pytest>=7.4",
  "pytest-cov>=4.1",
  "pytest-xdist>=3.5",
  "pytest-timeout>=2.2",
  "pytest-mock>=3.12",
  "coverage[toml]>=7.4",
  "pytest-benchmark>=4.0",
  "pytest-asyncio>=0.23"
]

[tool.pytest.ini_options]
markers = [
  "integration: marks tests as integration tests (may require external services)",
  "slow: marks tests as slow running (taking more than 60 seconds)",
  "llm: marks tests that require LLM API access",
  "llm_fast: marks fast LLM tests (under 15 seconds)",
  "llm_slow: marks slower LLM tests (over 30 seconds)"
]
# By default, skip slow and integration tests
# Run all: pytest -m ''
# Run integration: pytest -m integration
# Run slow: pytest -m slow
addopts = "-m 'not slow and not integration and not llm'"
testpaths = [
  "tests"
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["ai_dev_agent"]
branch = true
parallel = true
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/__init__.py",
  "*/setup.py",
  "*/conftest.py",
  "*/benchmarks/*",
  "*/ai_dev_agent/tools/code/*",
  "*/ai_dev_agent/tools/execution/shell_session.py",
  "*/ai_dev_agent/tools/execution/direct.py",
  "*/ai_dev_agent/testing/*",
  "*/ai_dev_agent/session/prompt_builder.py",
  "*/ai_dev_agent/session/summarizer.py",
  "*/ai_dev_agent/cli/react/executor.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
fail_under = 90.0
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"
title = "DevAgent Coverage Report"

[tool.coverage.json]
output = "coverage.json"
pretty_print = true

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip = ["__pycache__", ".venv", "venv", ".eggs", "dist"]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
  "E",    # pycodestyle errors
  "F",    # pyflakes
  "W",    # pycodestyle warnings
  "I",    # isort
  "N",    # pep8-naming
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "SIM",  # flake8-simplify
  "TCH",  # flake8-type-checking
  "RUF",  # Ruff-specific rules
  "PTH",  # flake8-use-pathlib
  "ERA",  # flake8-eradicate
]
ignore = [
  "E501",  # line too long (handled by black)
  "B008",  # do not perform function calls in argument defaults
  "B904",  # raise ... from err
  "SIM105", # use contextlib.suppress
  "PTH",   # temporarily ignore path issues
  "SIM102", # nested if statements (low priority)
  "RUF012", # mutable class defaults (low priority)
  "N806",   # variable naming in functions (low priority)
  "N803",   # argument naming (low priority)
  "RUF003", # ambiguous unicode (low priority)
  "RUF001", # ambiguous unicode in strings (low priority)
  "N814",   # imported as constant (low priority)
  "N818",   # exception naming (low priority)
  "N802",   # function naming (low priority)
  "F401",   # unused imports (can be checked separately)
  "F821",   # undefined names (in tests)
  "E722",   # bare except (acceptable for some cases)
  "ERA001", # commented code (intentional sometimes)
  "B021",   # f-string docstring (acceptable)
  "E741",   # ambiguous variable names (acceptable in some contexts)
  "I001",   # import ordering (handled by isort)
  "N817",   # camelcase imported as acronym (e.g., ET for ElementTree)
  "C416",   # unnecessary list comprehension (rewrite using list())
]
exclude = [
  ".git",
  "__pycache__",
  "dist",
  "build",
  ".venv",
  "venv",
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B", "SIM", "TCH", "E712"]
"__init__.py" = ["F401", "F403"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start permissive, gradually enable
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_optional = true
ignore_missing_imports = true
show_error_codes = true
namespace_packages = true
exclude = [
  "tests",
  "build",
  "dist",
  ".venv",
  "venv",
]

[tool.pydocstyle]
convention = "google"
match-dir = "^(?!(tests|build|dist|.venv|venv)).*"
add-ignore = ["D100", "D104"]  # Missing docstring in public module/package

[tool.bandit]
exclude_dirs = ["tests", "test", ".venv", "venv", "build", "dist"]
severity = "medium"
confidence = "medium"
skips = ["B101", "B601"]  # assert_used, shell_with_params
