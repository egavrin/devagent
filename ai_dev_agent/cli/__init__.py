"""CLI package exposing the DevAgent command entry points."""
from __future__ import annotations

import sys
import types

from . import commands as _commands
from .commands import (
    ASTFinding,
    Any,
    ApprovalManager,
    ApprovalPolicy,
    BaseFinding,
    BudgetedLLMClient,
    Callable,
    CodeLineSnippet,
    CommandFinding,
    DEEPSEEK_DEFAULT_BASE_URL,
    DEFAULT_MAX_TOOL_OUTPUT_CHARS,
    Dict,
    FILE_READ_TOOLS,
    FileFinding,
    FunctionFinding,
    GenericFinding,
    INTENT_HANDLERS,
    InMemoryStateStore,
    IntentDecision,
    IntentRouter,
    IntentRoutingError,
    Iterable,
    LLMConnectionError,
    LLMError,
    LLMRetryExhaustedError,
    LLMTimeoutError,
    LOGGER,
    List,
    MAX_HISTORY_ENTRIES,
    MIN_TOOL_OUTPUT_CHARS,
    Mapping,
    NaturalLanguageGroup,
    Optional,
    PLAN_JSON_FENCE_PATTERN,
    Path,
    PayloadBuilder,
    Planner,
    REGISTRY_INTENTS,
    RecoveryHandler,
    RegistryIntent,
    ResultHandler,
    RetryConfig,
    SEARCH_TOOLS,
    SandboxConfig,
    SandboxExecutor,
    SearchFinding,
    SearchMatch,
    Set,
    Settings,
    StateStore,
    SymbolFinding,
    SymbolMatch,
    TaskType,
    ToolContext,
    ToolLogDetails,
    ToolSelectionStrategy,
    Tuple,
    _FUNCTION_PATTERNS,
    _ResearchSummaryAggregator,
    _analyze_command_output,
    _analyze_file_read_output,
    _analyze_search_output,
    _build_ast_query_payload,
    _build_code_search_payload,
    _build_context,
    _build_exec_payload,
    _build_fallback_tool_summary,
    _build_fs_read_payload,
    _build_fs_write_patch_payload,
    _build_symbols_find_payload,
    _build_symbols_index_payload,
    _collect_tool_call_metadata,
    _create_sandbox,
    _execute_react_assistant,
    _extract_end_line_from_output,
    _extract_first_error_line,
    _extract_function_signatures,
    _extract_primary_path,
    _extract_tool_metrics,
    _fallback_error_message,
    _first_displayable_line,
    _format_enhanced_tool_log,
    _format_error_message,
    _format_file_reading_tree,
    _format_range_summary,
    _get_llm_client,
    _get_main_argument,
    _get_path_suggestions,
    _get_tool_status_indicator,
    _handle_ast_query_result,
    _handle_code_search_result,
    _handle_exec_result,
    _handle_fs_read_result,
    _handle_fs_write_patch_result,
    _handle_question_without_llm,
    _handle_symbols_find_result,
    _handle_symbols_index_result,
    _infer_task_files,
    _invoke_registry_tool,
    _is_file_complete,
    _is_pattern_search_command,
    _make_tool_context,
    _normalize_argument_list,
    _normalize_error_hint,
    _parse_ast_result,
    _parse_command_result,
    _parse_exit_code,
    _parse_file_read_result,
    _parse_search_result,
    _parse_symbol_result,
    _prompt_yes_no,
    _provide_research_summary,
    _record_invocation,
    _recover_symbols_find,
    _resolve_repo_path,
    _resolve_status_indicator,
    _safe_int,
    _select_highlight_lines,
    _select_highlight_matches,
    _truncate_text,
    _update_task_state,
    annotations,
    canonical_tool_name,
    cli,
    click,
    config_from_settings,
    configure_logging,
    create_client,
    dataclass,
    datetime,
    display_tool_name,
    expand_tool_aliases,
    extract_keywords,
    field,
    get_completion_class,
    get_correlation_id,
    get_logger,
    json,
    load_devagent_yaml,
    load_settings,
    main,
    os,
    query,
    re,
    set_correlation_id,
    shell,
    shlex,
    summarize_text,
    tool_category,
    tool_registry,
    tool_signature,
    uuid,
    write_artifact,
)

__all__ = [
    "ASTFinding",
    "Any",
    "ApprovalManager",
    "ApprovalPolicy",
    "BaseFinding",
    "BudgetedLLMClient",
    "Callable",
    "CodeLineSnippet",
    "CommandFinding",
    "DEEPSEEK_DEFAULT_BASE_URL",
    "DEFAULT_MAX_TOOL_OUTPUT_CHARS",
    "Dict",
    "FILE_READ_TOOLS",
    "FileFinding",
    "FunctionFinding",
    "GenericFinding",
    "INTENT_HANDLERS",
    "InMemoryStateStore",
    "IntentDecision",
    "IntentRouter",
    "IntentRoutingError",
    "Iterable",
    "LLMConnectionError",
    "LLMError",
    "LLMRetryExhaustedError",
    "LLMTimeoutError",
    "LOGGER",
    "List",
    "MAX_HISTORY_ENTRIES",
    "MIN_TOOL_OUTPUT_CHARS",
    "Mapping",
    "NaturalLanguageGroup",
    "Optional",
    "PLAN_JSON_FENCE_PATTERN",
    "Path",
    "PayloadBuilder",
    "Planner",
    "REGISTRY_INTENTS",
    "RecoveryHandler",
    "RegistryIntent",
    "ResultHandler",
    "RetryConfig",
    "SEARCH_TOOLS",
    "SandboxConfig",
    "SandboxExecutor",
    "SearchFinding",
    "SearchMatch",
    "Set",
    "Settings",
    "StateStore",
    "SymbolFinding",
    "SymbolMatch",
    "TaskType",
    "ToolContext",
    "ToolLogDetails",
    "ToolSelectionStrategy",
    "Tuple",
    "_FUNCTION_PATTERNS",
    "_ResearchSummaryAggregator",
    "_analyze_command_output",
    "_analyze_file_read_output",
    "_analyze_search_output",
    "_build_ast_query_payload",
    "_build_code_search_payload",
    "_build_context",
    "_build_exec_payload",
    "_build_fallback_tool_summary",
    "_build_fs_read_payload",
    "_build_fs_write_patch_payload",
    "_build_symbols_find_payload",
    "_build_symbols_index_payload",
    "_collect_tool_call_metadata",
    "_create_sandbox",
    "_execute_react_assistant",
    "_extract_end_line_from_output",
    "_extract_first_error_line",
    "_extract_function_signatures",
    "_extract_primary_path",
    "_extract_tool_metrics",
    "_fallback_error_message",
    "_first_displayable_line",
    "_format_enhanced_tool_log",
    "_format_error_message",
    "_format_file_reading_tree",
    "_format_range_summary",
    "_get_llm_client",
    "_get_main_argument",
    "_get_path_suggestions",
    "_get_tool_status_indicator",
    "_handle_ast_query_result",
    "_handle_code_search_result",
    "_handle_exec_result",
    "_handle_fs_read_result",
    "_handle_fs_write_patch_result",
    "_handle_question_without_llm",
    "_handle_symbols_find_result",
    "_handle_symbols_index_result",
    "_infer_task_files",
    "_invoke_registry_tool",
    "_is_file_complete",
    "_is_pattern_search_command",
    "_make_tool_context",
    "_normalize_argument_list",
    "_normalize_error_hint",
    "_parse_ast_result",
    "_parse_command_result",
    "_parse_exit_code",
    "_parse_file_read_result",
    "_parse_search_result",
    "_parse_symbol_result",
    "_prompt_yes_no",
    "_provide_research_summary",
    "_record_invocation",
    "_recover_symbols_find",
    "_resolve_repo_path",
    "_resolve_status_indicator",
    "_safe_int",
    "_select_highlight_lines",
    "_select_highlight_matches",
    "_truncate_text",
    "_update_task_state",
    "annotations",
    "canonical_tool_name",
    "cli",
    "click",
    "config_from_settings",
    "configure_logging",
    "create_client",
    "dataclass",
    "datetime",
    "display_tool_name",
    "expand_tool_aliases",
    "extract_keywords",
    "field",
    "get_completion_class",
    "get_correlation_id",
    "get_logger",
    "json",
    "load_devagent_yaml",
    "load_settings",
    "main",
    "os",
    "query",
    "re",
    "set_correlation_id",
    "shell",
    "shlex",
    "summarize_text",
    "tool_category",
    "tool_registry",
    "tool_signature",
    "uuid",
    "write_artifact",
]


class _CLIModule(types.ModuleType):
    """Module wrapper that keeps CLI re-exports in sync with commands."""

    def __getattr__(self, name):  # type: ignore[override]
        try:
            return super().__getattribute__(name)
        except AttributeError:
            value = getattr(_commands, name)
            super().__setattr__(name, value)
            return value

    def __setattr__(self, name, value):  # type: ignore[override]
        super().__setattr__(name, value)
        if hasattr(_commands, name):
            setattr(_commands, name, value)

    def __dir__(self):  # type: ignore[override]
        return sorted({*super().__dir__(), *dir(_commands)})


_module = _CLIModule(__name__)
_module.__dict__.update(globals())
sys.modules[__name__] = _module
